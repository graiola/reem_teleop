motion_adaption_node:

  wait_for_tf_in_sec:             0.5
  # define the reference frame for the tracked end points of the operator's body
  world_ref_frame_name:           /openni_depth_frame
  # define the tracked end points of the operator's body
  user:
    torso_frame_name:             /torso_1
    head_frame_name:              /head_1
    right_shoulder_frame_name:    /left_shoulder_1
    right_elbow_frame_name:       /left_elbow_1
    right_hand_frame_name:        /left_hand_1
    left_shoulder_frame_name:     /right_shoulder_1
    left_elbow_frame_name:        /right_elbow_1
    left_hand_frame_name:         /right_hand_1
  # define the robot's frames
  robot:
    base_frame_name:              /base_link
    torso_ref_frame_name:         /torso_1_link
    head_frame_name:              /head_2_link    
    right_shoulder_frame_name:    /arm_right_2_link
    right_elbow_frame_name:       /arm_right_4_link
    right_hand_frame_name:        /arm_right_7_link   
    left_shoulder_frame_name:     /arm_left_2_link
    
  # define roations of orientations by roll pitch yaw
  rotation_angles:
    # align the orientation of the user torso with robot torso
    # i.e.: user bends foward -> ref frame rotates forward
    ref_frame_rot: {p: 0.0, r: 1.5707963267948966, y: -1.5707963267948966}  
    # align adapted frames with goal frames
    goals:
      torso_goal_rot: {p: 1.5707963267948966, r: 3.1415926535897931, y: 0.0}
      head_goal_rot: {p: 1.5707963267948966, r: 3.1415926535897931, y: 0.0}
      right_elbow_goal_rot: {p: 0.0, r: 3.1415926535897931, y: 3.1415926535897931}
      right_hand_goal_rot: {p: 1.5707963267948966, r: 0.0, y: 0.0}
      left_elbow_goal_rot: {p: 3.1415926535897931, r: 0.0, y: 0.0}
      left_hand_goal_rot: {p: -1.5707963267948966, r: 0.0, y: 0.0}

#----------------------------------------------------------------------------------------------------------------------#

tree_kinematics_node:
  # name of the parameter, which contains the xml description of the robot model 
  urdf_xml_model:       robot_description

  # number of the end points of the kinematic tree
  nr_of_endpoints:      6
  # frame names of the end points
  endpoint_0:           torso_2_link
  endpoint_1:           head_2_link
  endpoint_2:           arm_right_4_link
  endpoint_3:           arm_right_7_link
  endpoint_4:           arm_left_4_link
  endpoint_5:           arm_left_7_link

  # frequency of the service calls for IK calculations in hz
  # used to calculate velocities and to adapt the maximum velocties specified below
  srv_call_frequency: 2


  # the precision of the end effectors position the IK solver tries to reach
  epsilon: 0.010

  # the maximum number of iterations the IK solver will execute
  max_iterations: 10

  # Factor applied to the maximum velocities specified in the urdf model of the robot in rad/sec
  q_dot_max_factor: 1.0
  q_dot_min_factor: 0.3

  # Actually it is a smoothing factor, which is used by the IK solver for exponential smoothing.
  # This is only applied, if the all end effectors are considered as keeping still 
  low_pass_factor:  1.0

  # minimum and maximum translational and rotational velocities of the endeffectors in m/sec
  x_dot_trans_min: 0.2
  x_dot_trans_max: 0.2
  x_dot_rot_min: 0.628
  x_dot_rot_max: 0.682

  # factor to prevent running through kinematic singularities
  lambda: 0.01

  # joint space weight matrix used by the IK solver
  # These values define the diagonal of the matrix (24x24)
  # check the documentation of the used IK velocity solver for more information 
  js_w_matr/j0:  0.0
  js_w_matr/j1:  0.0
  js_w_matr/j2:  0.0
  js_w_matr/j3:  0.0
  js_w_matr/j4:  1.0
  js_w_matr/j5:  1.0
  js_w_matr/j6:  1.0
  js_w_matr/j7:  1.0
  js_w_matr/j8:  1.0
  js_w_matr/j9:  1.0
  js_w_matr/j10: 1.0
  js_w_matr/j11: 1.0
  js_w_matr/j12: 1.0
  js_w_matr/j13: 1.0
  js_w_matr/j14: 1.0
  js_w_matr/j15: 1.0
  js_w_matr/j16: 1.0
  js_w_matr/j17: 1.0
  js_w_matr/j18: 1.0
  js_w_matr/j19: 1.0
  js_w_matr/j20: 1.0
  js_w_matr/j21: 1.0
  js_w_matr/j22: 1.0
  js_w_matr/j23: 1.0

  # task space weight matrix used by the IK solver
  # these values are define the diagonal of the matrices of each endpoint (6x6),
  # check the documentation of the used IK velocity solver for more information
  # NOTE: the order of the end points below does not need to (and usually indeed does not) correspond with the order
  # defined above!
  ts_w_matr/endpt0/px: 0.2
  ts_w_matr/endpt0/py: 0.2
  ts_w_matr/endpt0/pz: 0.2
  ts_w_matr/endpt0/rx: 0.2
  ts_w_matr/endpt0/ry: 0.2
  ts_w_matr/endpt0/rz: 0.2

  ts_w_matr/endpt1/px: 1.0
  ts_w_matr/endpt1/py: 1.0
  ts_w_matr/endpt1/pz: 1.0
  ts_w_matr/endpt1/rx: 1.0
  ts_w_matr/endpt1/ry: 1.0
  ts_w_matr/endpt1/rz: 1.0

  ts_w_matr/endpt2/px: 0.2
  ts_w_matr/endpt2/py: 0.2
  ts_w_matr/endpt2/pz: 0.2
  ts_w_matr/endpt2/rx: 0.2
  ts_w_matr/endpt2/ry: 0.2
  ts_w_matr/endpt2/rz: 0.2

  ts_w_matr/endpt3/px: 1.0
  ts_w_matr/endpt3/py: 1.0
  ts_w_matr/endpt3/pz: 1.0
  ts_w_matr/endpt3/rx: 1.0
  ts_w_matr/endpt3/ry: 1.0
  ts_w_matr/endpt3/rz: 1.0

  ts_w_matr/endpt4/px: 0.0
  ts_w_matr/endpt4/py: 0.0
  ts_w_matr/endpt4/pz: 0.0
  ts_w_matr/endpt4/rx: 0.0
  ts_w_matr/endpt4/ry: 1.0
  ts_w_matr/endpt4/rz: 1.0

  ts_w_matr/endpt5/px: 0.0
  ts_w_matr/endpt5/py: 0.0
  ts_w_matr/endpt5/pz: 0.0
  ts_w_matr/endpt5/rx: 0.0
  ts_w_matr/endpt5/ry: 1.0
  ts_w_matr/endpt5/rz: 1.0
  
#----------------------------------------------------------------------------------------------------------------------#

reem_teleop_coordinator_node:

  # number of the retargeted end points
  nr_of_endpoints:      6

  # name of the robot's frames
  endpoint_0:           torso_2_link
  endpoint_1:           head_2_link
  endpoint_2:           arm_right_4_link
  endpoint_3:           arm_right_7_link
  endpoint_4:           arm_left_4_link
  endpoint_5:           arm_left_7_link

  # name of the frames coming from motion adaption
  endpoint_0_goal:      torso_goal
  endpoint_1_goal:      head_goal
  endpoint_2_goal:      r_elbow_goal
  endpoint_3_goal:      r_hand_goal
  endpoint_4_goal:      l_elbow_goal
  endpoint_5_goal:      l_hand_goal

  # name of the common reference frame
  root_frame_name:      ref_frame

  # true if the calculated joint commands shall be checked for self-collision 
  check_self_collision: true

  # true if the calculated joint commands shall be checked if they respect joint limits
  # NOTE: usually false, because the joint limit checking by the environment server seems to be more rigid,
  # than what is applied by the IK solver
  check_joint_limits:   false  

  # loop rate, which determines the frequency of calculating new joint position commands
  loop_rate: 2
